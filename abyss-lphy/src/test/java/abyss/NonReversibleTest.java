package abyss;

import jebl.evolution.sequences.SequenceType;
import lphy.base.evolution.coalescent.Coalescent;
import lphy.base.evolution.likelihood.PhyloCTMC;
import lphy.base.evolution.tree.TimeTree;
import lphy.core.model.RandomVariable;
import lphy.core.model.Value;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.Arrays;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class NonReversibleTest {

    public static Stream<Arguments> getRatesAndFreqs() {
        return Stream.of(
                Arguments.of(new Double[] {0.0, 1.0, 1.0,
                                           1.0, 0.5, 0.5,
                                           0.25, 0.75, 1.0,
                                           2.0, 0.25, 0.25},
                        new Double[]{0.25, 0.25, 0.25, 0.25},
                        new double[][]{
                                {  0.912477081978045,  0.00101328166949671,  0.0431297546763441,  0.0433798816761137  },
                                {  0.0440184641409722,  0.910698189163741,  0.0225771764176366,  0.0227061702776501  },
                                {  0.013492429602301,  0.0323872481864604,  0.911103839954393,  0.0430164822568455  },
                                {  0.0850630540885092,  0.0108050382398262,  0.0127248532774291,  0.891407054394236  }
                        }),
                Arguments.of(new Double[] {0.0, 1E6, 1E-6,
                                            0.0, 1E-6, 0.0,
                                            1E6, 1E-6, 1E-6,
                                            1E6, 0.0, 0.0},
                        new Double[]{0.2, 0.3, 0.1, 0.4},
                        new double[][]{
                                {  0.926266927690282,  9.60026102377085e-15,  0.0737330723094014,  3.07036550218298e-13  },
                                {  6.40017401584793e-15,  0.999999999999917,  7.69331593173339e-14,  1.31483915572395e-26  },
                                {  0.147466144618827,  2.30799477952002e-13,  0.852533855380635,  3.07036550218261e-13  },
                                {  0.147466144618845,  5.22065288315468e-16,  0.00605213049030376,  0.846481724890851  }
                        }),
                Arguments.of(new Double[] {0.024839,0.021702,0.057358,0.009841,0.153331,0.008822,0.011772,0.022558,0.036913,0.021756,0.008938,0.044982,0.032825,0.025296,0.293716,0.137408,0.148024,0.002333,0.007072,
                                           0.232486,0.004676,0.000546,0.056320,0.054099,0.018577,0.035820,0.001309,0.070488,0.022833,0.026613,0.004951,0.004423,0.025881,0.269618,0.088302,0.127071,0.012551,0.055425,
                                           0.044710,0.001005,0.326706,0.001080,0.052222,0.021840,0.000896,0.020318,0.002286,0.000989,0.191135,0.022948,0.027123,0.009358,0.077216,0.027947,0.004353,0.000420,0.004721,
                                           0.118220,0.000059,0.270615,0.000582,0.021725,0.007838,0.003626,0.102520,0.007130,0.003952,0.021301,0.016134,0.155617,0.021300,0.038580,0.037116,0.021735,0.000479,0.002812,
                                           0.026441,0.018883,0.001150,0.001353,0.008862,0.012430,0.070699,0.001389,0.252441,0.044106,0.003831,0.005741,0.001947,0.002412,0.021129,0.011973,0.055028,0.032868,0.235871,
                                           0.127508,0.006487,0.071880,0.037516,0.004095,0.012548,0.001225,0.028883,0.005257,0.003396,0.072902,0.016073,0.018332,0.028838,0.099294,0.012391,0.006240,0.002352,0.002807,
                                           0.039332,0.015673,0.047205,0.035568,0.039262,0.017984,0.008240,0.042932,0.048364,0.010573,0.188167,0.025292,0.204985,0.143719,0.068742,0.032930,0.016729,0.009791,0.191292,
                                           0.005603,0.004834,0.000261,0.000678,0.059498,0.000877,0.001160,0.005215,0.436284,0.096978,0.005410,0.002106,0.001036,0.002475,0.003338,0.041873,0.793911,0.001628,0.012843,
                                           0.048771,0.000546,0.014790,0.102560,0.000983,0.013086,0.016882,0.013869,0.015160,0.016086,0.082824,0.012811,0.131025,0.307891,0.052139,0.062271,0.017249,0.000324,0.004069,
                                           0.037235,0.009588,0.000786,0.003274,0.109896,0.005132,0.007518,0.237423,0.005256,0.140795,0.002342,0.011801,0.017910,0.013407,0.009778,0.015587,0.134209,0.009406,0.012618,
                                           0.107191,0.015205,0.002928,0.021256,0.071490,0.013208,0.011163,0.281442,0.053575,0.627472,0.021210,0.006398,0.080762,0.039819,0.037128,0.132351,0.148243,0.012371,0.028934,
                                           0.028963,0.006533,0.239745,0.045019,0.004546,0.071780,0.092101,0.012715,0.140837,0.007891,0.007312,0.007416,0.074468,0.038588,0.251906,0.098966,0.008540,0.000576,0.018855,
                                           0.125761,0.001238,0.028954,0.043969,0.003864,0.016844,0.013177,0.006316,0.032264,0.027607,0.002930,0.009735,0.032387,0.024990,0.090102,0.035664,0.022493,0.001447,0.003449,
                                           0.105642,0.002059,0.031175,0.287997,0.001766,0.016920,0.101499,0.007944,0.184128,0.074342,0.031984,0.063599,0.027689,0.159619,0.073855,0.064808,0.023335,0.002524,0.008306,
                                           0.049545,0.011113,0.007193,0.023148,0.002563,0.024400,0.063797,0.008438,0.286621,0.037014,0.011105,0.023926,0.013835,0.115653,0.047041,0.033298,0.016122,0.007866,0.009876,
                                           0.279843,0.025942,0.077126,0.044293,0.014468,0.123647,0.023280,0.004996,0.044453,0.021951,0.007648,0.149098,0.079233,0.052127,0.043941,0.303425,0.007812,0.003200,0.013761,
                                           0.152268,0.012648,0.028807,0.057316,0.006905,0.013361,0.015207,0.071103,0.075085,0.031373,0.040898,0.088614,0.025966,0.046415,0.043048,0.392905,0.137154,0.001680,0.010344,
                                           0.269526,0.029277,0.002328,0.017800,0.029561,0.010870,0.004927,0.613175,0.010642,0.193074,0.050350,0.004876,0.017336,0.009091,0.009273,0.009078,0.139110,0.002774,0.004810,
                                           0.019550,0.010755,0.002233,0.004350,0.088395,0.015920,0.011099,0.009252,0.004386,0.057245,0.013427,0.002448,0.008117,0.008078,0.027421,0.015532,0.007637,0.013981,0.084264,
                                           0.016996,0.020894,0.007098,0.007687,0.333270,0.003692,0.113502,0.013404,0.008829,0.030010,0.009942,0.023276,0.003999,0.010515,0.013447,0.022690,0.012800,0.019909,0.038235},
                        new Double[]{0.085828, 0.010431, 0.056571, 0.067733, 0.042634,
                                     0.065784, 0.021005, 0.054760, 0.059301, 0.099342,
                                     0.019806, 0.042208, 0.039871, 0.039497, 0.057765,
                                     0.069819, 0.055733, 0.064280, 0.014445, 0.033186},
                        new double[][]{
                                {  0.898036880774283,  0.000401149709901774,  0.00215441874067923,  0.00618642293506118,  0.000711811639255132,  0.015826611309798,  0.00031318382480847,  0.00145715021041966,  0.00227941634896015,  0.00610883781940667,  0.00066027466735718,  0.000846272588495548,  0.0028895043246137,  0.00207968247132082,  0.00242754462334061,  0.0309621637428295,  0.0119797776248311,  0.0142269941672711,  5.67831332059222e-05,  0.000395119344161796  },
                                {  0.0308237457752258,  0.884785373261138,  0.000598021223113707,  0.00031104571658645,  0.00376873760666639,  0.00594683311966224,  0.000621525930941436,  0.00336989971297231,  0.000320424262493201,  0.0113347779813975,  0.000707269726929359,  0.0018942051155905,  0.000452210031226637,  0.000389785809053814,  0.00242988263120093,  0.0286046900182634,  0.00798683085256165,  0.0124797836839492,  0.000288338248021253,  0.00288661929300606  },
                                {  0.00646025300081953,  2.09026700416012e-05,  0.92115705016857,  0.0343047035591459,  8.91311151505942e-05,  0.00558116564710875,  0.000739376880662119,  0.000120939971490188,  0.00219600148616273,  0.000466695834537318,  4.06787202453061e-05,  0.0123951627159227,  0.00149291298644065,  0.00186831624097597,  0.000989018561308505,  0.00860545763576542,  0.00264431206351321,  0.000550175125722498,  1.11050730942274e-05,  0.000266640543322132  },
                                {  0.0158570677164879,  7.30876939803804e-06,  0.0237214343812568,  0.921379168129594,  6.05055394468778e-05,  0.00249838993848302,  0.000292209307079331,  0.00040159893823441,  0.00957049927856987,  0.00131592245269394,  0.000135460131488876,  0.0016260928557061,  0.00107995927117581,  0.00938473337057995,  0.00218262277567311,  0.00462751148921107,  0.00339625208465766,  0.00228727070984428,  1.27636814170361e-05,  0.000163229179002291  },
                                {  0.00378739003711235,  0.00030745950959316,  0.000131597704070927,  0.000194215966011289,  0.923065442182189,  0.000983665365940807,  0.000434118172349462,  0.00632503524448008,  0.000175514952123068,  0.0395918533686566,  0.00137697495221805,  0.000287440993257871,  0.000393941188007973,  0.000165823195772484,  0.000278263061619714,  0.00238006724889908,  0.0011614428627609,  0.00588042214417293,  0.000762344852632308,  0.0123169869981316  },
                                {  0.0172362776180531,  0.000110986042672974,  0.00652880321190144,  0.00423397967405432,  0.000294616189026355,  0.943779059071807,  0.000433626410896505,  0.000155036650151934,  0.00283458539372239,  0.00096074632185732,  0.000112927704313771,  0.0048727852772887,  0.00108303840589972,  0.00121038062136678,  0.00273560948626753,  0.0110356128538769,  0.0013763688498089,  0.000783310581725819,  5.61190966838405e-05,  0.000166130538624668  },
                                {  0.00562146487613221,  0.000254315688261048,  0.00435398280227094,  0.00410550457973874,  0.00273069625312549,  0.00204238055550518,  0.905848100676601,  0.000842553666214866,  0.00434692419484264,  0.00776531301112742,  0.000341230050333618,  0.0121422667113629,  0.00162894990920063,  0.012271820081994,  0.0130087175851638,  0.00768453880146897,  0.00305224713333215,  0.00180994966847977,  0.000230850965752531,  0.0099181927890922  },
                                {  0.0024126824686971,  9.96314242035866e-05,  4.99426434018184e-05,  0.000187821610337791,  0.00411012582633937,  0.000180146784047132,  5.6660534948389e-05,  0.843752115854986,  0.000548009155122909,  0.0661461308494482,  0.00288187838508046,  0.000372505825800212,  0.000205608309702387,  0.000142497537563083,  0.000317745670462061,  0.00055509985250971,  0.00393597983584817,  0.0732915687611212,  4.84353310043404e-05,  0.000705413339375856  },
                                {  0.00687864721263176,  1.60752830221049e-05,  0.00155596872813557,  0.010980470097417,  9.52587354590261e-05,  0.00153283316685589,  0.000604535137322176,  0.00124297137635729,  0.918436612045971,  0.00264336392049454,  0.000488130104687263,  0.00543308815069695,  0.000859807946290325,  0.00800585684787421,  0.0276779743885255,  0.0059529150851882,  0.00547986270574185,  0.00186786881746522,  1.16744339453678e-05,  0.000236085815918866  },
                                {  0.00531120330895328,  0.00016087628103403,  9.6994686366849e-05,  0.000419600791057839,  0.00739576932378497,  0.000608515098999535,  0.000255632084026503,  0.0198490951190709,  0.000557333338067272,  0.940227699084441,  0.00414199808015274,  0.000184630758725591,  0.000769490341971608,  0.00111700506784744,  0.00126490767400991,  0.00121469612906774,  0.00153867902877222,  0.0139341154775259,  0.000222165387530261,  0.000729592938594302  },
                                {  0.0140524876743085,  0.000245104622356683,  0.000355134814538473,  0.0023424762903439,  0.00489518183584183,  0.00149829154142349,  0.000379720874780462,  0.0228426810200967,  0.00483080505728293,  0.0927395669354165,  0.81350160185245,  0.00139698848500638,  0.000477326412610488,  0.00467777604270048,  0.00359813030975709,  0.0043205717495332,  0.0108555173764228,  0.0152018475812238,  0.000281668311125486,  0.00150712121278093  },
                                {  0.00467587113207056,  0.000111779105986423,  0.0208811183055741,  0.00532081537354208,  0.000341781684473227,  0.00759864874812169,  0.00296466357681975,  0.00110868573053091,  0.0129553377272427,  0.00144881692654997,  0.000231605565633653,  0.896032332961868,  0.000580024403405588,  0.00458110870602657,  0.00376987354753239,  0.0266478957145294,  0.00871291162938579,  0.00101137112974881,  1.64646157770249e-05,  0.00100889341518131  },
                                {  0.0170385477950095,  2.7568697571849e-05,  0.00269999223378876,  0.00485641794084848,  0.0002950567862366,  0.00199423075027646,  0.000448049849531668,  0.000656409980218907,  0.00312769193553417,  0.00450862626944273,  0.000110302847588658,  0.000746030207517979,  0.943035803008895,  0.00205130889292753,  0.00239413762495623,  0.0100293127621405,  0.003332097479749,  0.00241367368253124,  3.56486708769617e-05,  0.000199092584357222  },
                                {  0.0142341449939871,  4.13832915290479e-05,  0.0031774668698265,  0.0297245842221098,  0.000190389012612131,  0.00198526630058439,  0.00323446495631135,  0.000881208544331631,  0.0169133070318037,  0.011558406193244,  0.00094739577579716,  0.00419266229818506,  0.00177801364302517,  0.879778752409056,  0.0143593930939817,  0.00823636659208422,  0.00570729051431465,  0.00253256091088814,  6.11832534450046e-05,  0.000465760092883429  },
                                {  0.00691465310306213,  0.00018120068313354,  0.000758915285568727,  0.0027799771416061,  0.00021543715785836,  0.00266172584846931,  0.00209279058910803,  0.000835216621283371,  0.0264629657543594,  0.0059737451107735,  0.000353272259348353,  0.00170593544802682,  0.000920248181808801,  0.00710025320140005,  0.930169578794375,  0.00533659655558698,  0.00306243275496156,  0.00174913993754495,  0.000182766682726659,  0.000543148888998626  },
                                {  0.0363556285228055,  0.000413430951536366,  0.00688407822097267,  0.00500283641109754,  0.000983193063858425,  0.012832718847551,  0.000780323018392023,  0.000583942850533636,  0.00432084883218262,  0.00364538195657669,  0.000260676790396328,  0.00956227934640996,  0.00492603991482065,  0.00322037828674826,  0.00409244230885053,  0.878796948458213,  0.025236689938472,  0.00128888115170105,  7.54187590457653e-05,  0.000737862369835948  },
                                {  0.0207183096410901,  0.000214016364136401,  0.00279545803578788,  0.00620570335016262,  0.000533976786320188,  0.0018664181283529,  0.00052471425847278,  0.00608035678262299,  0.00699278776110845,  0.00545411624738883,  0.00119758861870397,  0.00584918121333407,  0.00174765248051017,  0.00290203558393531,  0.00404625865092235,  0.04089935391216,  0.87803229496363,  0.0133314092538072,  4.22706816956082e-05,  0.000566097285857712  },
                                {  0.0343851750623998,  0.000460998155523145,  0.000293756472400694,  0.00199255508288408,  0.00213250038549066,  0.00141932735881898,  0.000172634644874824,  0.0482669030094362,  0.00108640587405853,  0.0309863949864817,  0.00156545714737228,  0.00038558135809994,  0.00113097285287207,  0.000626953968434909,  0.000931127974321554,  0.00185084543861741,  0.0116716140060237,  0.860272816517472,  6.85052893237317e-05,  0.000299474415094284  },
                                {  0.00277620322007207,  0.000178281976247817,  0.000229818498700331,  0.000511778231976217,  0.00605872337946391,  0.00172607231507136,  0.000383192453995856,  0.000935902625357379,  0.000475375004353576,  0.00931986855674729,  0.00042609062758538,  0.000192711324750424,  0.000536899614780733,  0.000527276095419907,  0.00255220960924091,  0.00178686411266141,  0.000736127888092185,  0.00153156219726631,  0.964577295793986,  0.00453774647423077  },
                                {  0.00246857590260546,  0.000341882418541685,  0.000685815675558474,  0.000883123424670546,  0.0223484775740573,  0.000456212657679344,  0.00372295496774234,  0.00129571958004356,  0.000886940149134874,  0.00533567623647062,  0.000325094578485717,  0.00157807628762785,  0.000278849324857351,  0.000694071325613288,  0.00129332157918089,  0.00258584773476585,  0.0012002530492386,  0.00213203196430332,  0.000897258889315305,  0.950589816680108  }
                        })
        );
    }


    RandomVariable<TimeTree> tree;
    @BeforeEach
    void setUp() {
        // this is only for init PhyloCTMC, tree would not be required.
        Coalescent coalescent = new Coalescent(new Value<>("theta", 10.0),
                new Value<>("n", 10), null);
        tree = coalescent.sample();
    }

    @ParameterizedTest
    @MethodSource("getRatesAndFreqs")
    void testNonRev(Double[] rates, Double[] freqs, final double[][] expectedP) {

        NonReversible nonrev = new NonReversible(new Value<>("rates", rates), new Value<>("freqs", freqs),
                null, new Value<>("meanRate", 1.0));

        final Value Q = nonrev.apply();

        int numStates = freqs.length;
        SequenceType dataType;
        if (numStates == 20) {
            dataType = SequenceType.AMINO_ACID;
        } else {
            dataType = SequenceType.NUCLEOTIDE;
        }

        PhyloCTMC phyloCTMC = new PhyloCTMC(tree, null, null, Q,
                null, null, new Value<>("L", 100),
                new Value<>("dataType", dataType), null);
        // not simulate sequences, so ignore sample(), then tree stats and L should not affect the result
        phyloCTMC.setup();
        double[][] p = new double[numStates][numStates];
        double branchLength = 0.1;
        phyloCTMC.getTransitionProbabilities(branchLength, p);
        System.out.println("Actual trans probs = " + Arrays.deepToString(p));
        System.out.println("Expected trans probs = " + Arrays.deepToString(expectedP));

        for (int i = 0; i < p.length; i++) {
            assertArrayEquals(p[i], expectedP[i], 1E-12);
        }

        for (int i=0; i < numStates; i++) {
            Double[][] Qval = (Double[][]) Q.value();
            double sum1 = 0;
            double sum2 = 0;
            for (int j=0; j<numStates; j++) {
                sum1 += Qval[i][j];
                sum2 += p[i][j];
            }
            System.out.println("row " + (i+1) + " Q sum = " + sum1);
            assertEquals(0, sum1, 1E-12);
            System.out.println("row " + (i+1) + " prob sum = " + sum2);
            assertEquals(1, sum2, 1E-12);
        }

    }


}