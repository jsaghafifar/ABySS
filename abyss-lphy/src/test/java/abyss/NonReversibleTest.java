package abyss;

import jebl.evolution.sequences.SequenceType;
import lphy.base.evolution.coalescent.Coalescent;
import lphy.base.evolution.likelihood.PhyloCTMC;
import lphy.base.evolution.tree.TimeTree;
import lphy.core.model.RandomVariable;
import lphy.core.model.Value;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import java.util.Arrays;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.assertArrayEquals;
import static org.junit.jupiter.api.Assertions.assertEquals;

class NonReversibleTest {

    public static Stream<Arguments> getRates() {
        return Stream.of(
                Arguments.of(new Double[] {0.0, 1.0, 1.0,
                                           1.0, 0.5, 0.5,
                                           0.25, 0.75, 1.0,
                                           2.0, 0.25, 0.25},
                        new double[][]{
                                {  0.912477081978045,  0.00101328166949671,  0.0431297546763441,  0.0433798816761137  },
                                {  0.0440184641409722,  0.910698189163741,  0.0225771764176366,  0.0227061702776501  },
                                {  0.013492429602301,  0.0323872481864604,  0.911103839954393,  0.0430164822568455  },
                                {  0.0850630540885092,  0.0108050382398262,  0.0127248532774291,  0.891407054394236  }
                        }),
                Arguments.of(new Double[] {0.0, 1E6, 1E-6,
                                            0.0, 1E-6, 0.0,
                                            1E6, 1E-6, 1E-6,
                                            1E6, 0.0, 0.0},
                        new double[][]{
                                {  0.882964169182351,  8.1487512578066e-15,  0.117035830817516,  1.24826680956888e-13  },
                                {  8.14875125780696e-15,  0.999999999999867,  1.25184582075323e-13,  8.50665237625747e-27  },
                                {  0.117035830817524,  1.25184582075323e-13,  0.882964169182226,  1.24826680956881e-13  },
                                {  0.117035830817532,  3.57901118450515e-16,  0.00779085013935644,  0.875173319043111  }
                        }),
                Arguments.of(new Double[] {0.024839,0.021702,0.057358,0.009841,0.153331,0.008822,0.011772,0.022558,0.036913,0.021756,0.008938,0.044982,0.032825,0.025296,0.293716,0.137408,0.148024,0.002333,0.007072,
                                           0.232486,0.004676,0.000546,0.056320,0.054099,0.018577,0.035820,0.001309,0.070488,0.022833,0.026613,0.004951,0.004423,0.025881,0.269618,0.088302,0.127071,0.012551,0.055425,
                                           0.044710,0.001005,0.326706,0.001080,0.052222,0.021840,0.000896,0.020318,0.002286,0.000989,0.191135,0.022948,0.027123,0.009358,0.077216,0.027947,0.004353,0.000420,0.004721,
                                           0.118220,0.000059,0.270615,0.000582,0.021725,0.007838,0.003626,0.102520,0.007130,0.003952,0.021301,0.016134,0.155617,0.021300,0.038580,0.037116,0.021735,0.000479,0.002812,
                                           0.026441,0.018883,0.001150,0.001353,0.008862,0.012430,0.070699,0.001389,0.252441,0.044106,0.003831,0.005741,0.001947,0.002412,0.021129,0.011973,0.055028,0.032868,0.235871,
                                           0.127508,0.006487,0.071880,0.037516,0.004095,0.012548,0.001225,0.028883,0.005257,0.003396,0.072902,0.016073,0.018332,0.028838,0.099294,0.012391,0.006240,0.002352,0.002807,
                                           0.039332,0.015673,0.047205,0.035568,0.039262,0.017984,0.008240,0.042932,0.048364,0.010573,0.188167,0.025292,0.204985,0.143719,0.068742,0.032930,0.016729,0.009791,0.191292,
                                           0.005603,0.004834,0.000261,0.000678,0.059498,0.000877,0.001160,0.005215,0.436284,0.096978,0.005410,0.002106,0.001036,0.002475,0.003338,0.041873,0.793911,0.001628,0.012843,
                                           0.048771,0.000546,0.014790,0.102560,0.000983,0.013086,0.016882,0.013869,0.015160,0.016086,0.082824,0.012811,0.131025,0.307891,0.052139,0.062271,0.017249,0.000324,0.004069,
                                           0.037235,0.009588,0.000786,0.003274,0.109896,0.005132,0.007518,0.237423,0.005256,0.140795,0.002342,0.011801,0.017910,0.013407,0.009778,0.015587,0.134209,0.009406,0.012618,
                                           0.107191,0.015205,0.002928,0.021256,0.071490,0.013208,0.011163,0.281442,0.053575,0.627472,0.021210,0.006398,0.080762,0.039819,0.037128,0.132351,0.148243,0.012371,0.028934,
                                           0.028963,0.006533,0.239745,0.045019,0.004546,0.071780,0.092101,0.012715,0.140837,0.007891,0.007312,0.007416,0.074468,0.038588,0.251906,0.098966,0.008540,0.000576,0.018855,
                                           0.125761,0.001238,0.028954,0.043969,0.003864,0.016844,0.013177,0.006316,0.032264,0.027607,0.002930,0.009735,0.032387,0.024990,0.090102,0.035664,0.022493,0.001447,0.003449,
                                           0.105642,0.002059,0.031175,0.287997,0.001766,0.016920,0.101499,0.007944,0.184128,0.074342,0.031984,0.063599,0.027689,0.159619,0.073855,0.064808,0.023335,0.002524,0.008306,
                                           0.049545,0.011113,0.007193,0.023148,0.002563,0.024400,0.063797,0.008438,0.286621,0.037014,0.011105,0.023926,0.013835,0.115653,0.047041,0.033298,0.016122,0.007866,0.009876,
                                           0.279843,0.025942,0.077126,0.044293,0.014468,0.123647,0.023280,0.004996,0.044453,0.021951,0.007648,0.149098,0.079233,0.052127,0.043941,0.303425,0.007812,0.003200,0.013761,
                                           0.152268,0.012648,0.028807,0.057316,0.006905,0.013361,0.015207,0.071103,0.075085,0.031373,0.040898,0.088614,0.025966,0.046415,0.043048,0.392905,0.137154,0.001680,0.010344,
                                           0.269526,0.029277,0.002328,0.017800,0.029561,0.010870,0.004927,0.613175,0.010642,0.193074,0.050350,0.004876,0.017336,0.009091,0.009273,0.009078,0.139110,0.002774,0.004810,
                                           0.019550,0.010755,0.002233,0.004350,0.088395,0.015920,0.011099,0.009252,0.004386,0.057245,0.013427,0.002448,0.008117,0.008078,0.027421,0.015532,0.007637,0.013981,0.084264,
                                           0.016996,0.020894,0.007098,0.007687,0.333270,0.003692,0.113502,0.013404,0.008829,0.030010,0.009942,0.023276,0.003999,0.010515,0.013447,0.022690,0.012800,0.019909,0.038235},
                        new double[][]{
                                {  0.900217036242986,  0.00228533333381217,  0.00223126149643978,  0.00541500188941967,  0.000988417086637948,  0.0142502596179318,  0.000879865138885401,  0.00155971014342417,  0.00227578690325164,  0.00366279129545844,  0.00199609874139293,  0.00116062647047487,  0.00428871393995791,  0.00311762938805243,  0.00248814035304395,  0.0263152675766699,  0.012719841769884,  0.0132036693967988,  0.000233773744999344,  0.000710775470478646  },
                                {  0.0213382365574735,  0.895671275565579,  0.000611440583417451,  0.000243056796118286,  0.00527642744176859,  0.00529033898292472,  0.00175253618945396,  0.00364812885085959,  0.000313610137927981,  0.00678685339348723,  0.00212599385556792,  0.00264196263450831,  0.00063724035627169,  0.000577905908651232,  0.00248738616889273,  0.0242698854265163,  0.00843344022430544,  0.0115532531728738,  0.00118963021974897,  0.00515139753365284  },
                                {  0.00443316612654631,  0.000118025652557031,  0.920984788342207,  0.0299519058791475,  0.000128715247098272,  0.00501872657548479,  0.00208764208085308,  0.000132715908342021,  0.00220561862287441,  0.000282328014874061,  0.000123345591347339,  0.0173324741915838,  0.00221393645423871,  0.00279498038922524,  0.00102709657104204,  0.00732817499110078,  0.00280654281841057,  0.000496371688747969,  4.62511264331208e-05,  0.00048719372788614  },
                                {  0.0109566117264178,  3.58556057402967e-05,  0.0247902239923818,  0.919744120892302,  8.30949697768097e-05,  0.00221638400656505,  0.000840680122404389,  0.000431592343682064,  0.00956139645577526,  0.00079550980724281,  0.000410590662308638,  0.00229532534457936,  0.0016010358356306,  0.0140635018336781,  0.00226316042813084,  0.00388375727282915,  0.00359222329053449,  0.00208815034488951,  5.25797551958178e-05,  0.00029420530993521  },
                                {  0.00261862581899412,  0.00175824603929837,  0.000141907628316956,  0.000172941314470733,  0.923486481296342,  0.000881478030018838,  0.00126271041506346,  0.00677134826291482,  0.000184095990713862,  0.0235251063449451,  0.0040868764671527,  0.000420757672807416,  0.000578089800210594,  0.000257354144868215,  0.000294860321900964,  0.00203525997375187,  0.00124279192573645,  0.00538978650935248,  0.00312988584737254,  0.0217613961957686  },
                                {  0.0119050016894514,  0.000626962408549547,  0.00684355572238495,  0.00370145783064191,  0.000410682803200533,  0.946361998726705,  0.00122125104752698,  0.000166057225993991,  0.00283585279577863,  0.000572956339395589,  0.000337882588644641,  0.00682206366361435,  0.00159839095398047,  0.00181796201970719,  0.00280251949007886,  0.00932641787055085,  0.00142253141513557,  0.000692624151503572,  0.00023006640906224,  0.000303764848093427  },
                                {  0.00389172885110352,  0.00144490672643822,  0.00457100150267325,  0.0036518083972945,  0.00387331054420399,  0.00183271920457074,  0.889288476299783,  0.000900085005073894,  0.00438233095118625,  0.00462391901409861,  0.00102461634727897,  0.0168485455184098,  0.00240657046132472,  0.0182523620220347,  0.0132255712954171,  0.00654310534843066,  0.00325083391536705,  0.00166453286491514,  0.000951923200400515,  0.0173716525299951  },
                                {  0.00159416553749193,  0.000559631991768194,  5.3469203225508e-05,  0.000162679697243683,  0.00565168851548132,  0.000155132479439114,  0.000157063121681042,  0.866507772225247,  0.000559641357882696,  0.0397607007764006,  0.00868412571089456,  0.000531810570601126,  0.000289693919803531,  0.000213739012691009,  0.000321348922081437,  0.000476315955435132,  0.00422116188702751,  0.068634291086284,  0.000194087632131024,  0.00127148039718993  },
                                {  0.0047513896714877,  9.06014626499277e-05,  0.00163518253694065,  0.00961965964041872,  0.000134950789795762,  0.00136864347952329,  0.00171447019189226,  0.00135839771401892,  0.914054035883285,  0.00160749275234395,  0.00148009739392356,  0.00759741948969877,  0.00127607072966911,  0.0119889084141921,  0.0282380058109739,  0.00505640731031318,  0.00582541044330422,  0.00172324753709063,  4.91871358315376e-05,  0.000430421612646527  },
                                {  0.00368989476469981,  0.000918522741266217,  0.000103073926850746,  0.000377994804845698,  0.0102366460990767,  0.00054176012717497,  0.000721467579856248,  0.0216642739455847,  0.00057986044515305,  0.92633106739344,  0.012516100052016,  0.000272516495934882,  0.00113809826676462,  0.00169973109331256,  0.00130803099345783,  0.00103702962017453,  0.00167521439770899,  0.0129406253435962,  0.000913166403492366,  0.00133492550559371  },
                                {  0.00981465522565391,  0.00140237288034075,  0.000378186235801055,  0.00209854464790501,  0.00673257365166527,  0.0013336919882351,  0.00108567325078863,  0.0249880745346775,  0.00490837457630251,  0.0558808395005883,  0.844420896486059,  0.00199704595405584,  0.000692429790640565,  0.00711137951008974,  0.00373696382272592,  0.00369216004300445,  0.0117187871181963,  0.0141288811820728,  0.00115958237887865,  0.0027188872223186  },
                                {  0.0031938071643591,  0.000635019602043881,  0.021776439195141,  0.00467972791564735,  0.000494300106676088,  0.00680362114041322,  0.00826680463065213,  0.00121385700785705,  0.0128893362957201,  0.000891328752195685,  0.000704749168280053,  0.892203081519916,  0.000853181588510357,  0.00689639527185389,  0.00388931339746158,  0.0225549629706289,  0.00921195817987605,  0.00094076214525748,  7.14299498788606e-05,  0.00182992399763141  },
                                {  0.0117805583260344,  0.000149472061111417,  0.00281923945961206,  0.00425213010503888,  0.000402816282465828,  0.00175403591571843,  0.00125739673650214,  0.000694605770535683,  0.00312507213713628,  0.002676385769726,  0.000320192656958838,  0.00104432766546256,  0.949515733385226,  0.0030786684026212,  0.00245635162857059,  0.00846411385103384,  0.00350622757903147,  0.00219783016646579,  0.000145635459335963,  0.000359206641412674  },
                                {  0.00982203911853897,  0.00023428628235612,  0.00330157733238939,  0.0259791921866969,  0.000262468687025215,  0.00175810728438133,  0.00904367953384291,  0.000933292230287371,  0.0168637133387075,  0.00690962532514369,  0.00285255801372031,  0.00591500068736013,  0.00263928236552031,  0.882292859748724,  0.0147189685118876,  0.00697307263950469,  0.00606018499907703,  0.00230716704184814,  0.000252669396548809,  0.000880255276439249  },
                                {  0.00478447009446097,  0.00103096387202586,  0.000804914603061787,  0.00247251493818263,  0.00030610311722165,  0.00238121974278845,  0.00584551357435756,  0.000894378318892526,  0.0263040385683417,  0.00356828885835789,  0.00106197569437918,  0.00242041928140431,  0.00136743287329577,  0.0106527622098148,  0.924970288804474,  0.00452910691842939,  0.00325360411405534,  0.00160610628214796,  0.000747706931925916,  0.000998191202382714  },
                                {  0.0251473737328011,  0.00234873561497843,  0.0072304999944367,  0.004380695722836,  0.00137317759901013,  0.0114940859766425,  0.00220532902762286,  0.000633457521391138,  0.00433970088839315,  0.00217919669637255,  0.000781572646798471,  0.0133938508610421,  0.00731438869947297,  0.00484338272712271,  0.00420239309441045,  0.878514010486053,  0.0268420308436062,  0.00113750929441654,  0.000310686078089537,  0.00132792249450307  },
                                {  0.0142819321331944,  0.00121096466767155,  0.00292386503632243,  0.0054337608160829,  0.00074618802073208,  0.00161126602915515,  0.00148124343520962,  0.00665612915726704,  0.0069973399730853,  0.003311332281224,  0.00363676456697699,  0.00817579653280278,  0.00257330102470457,  0.00436193482399983,  0.00415125111538432,  0.0347379364067913,  0.884147780780335,  0.0123708353770396,  0.000174559619460844,  0.00101581820256059  },
                                {  0.0239008183924238,  0.00263150545030596,  0.000297157384682472,  0.00172694976962238,  0.00293892942615605,  0.00120725656130058,  0.000483624611064549,  0.0530623323707226,  0.00108763813442556,  0.0186185475980423,  0.00471834586326188,  0.000547726665021252,  0.00166424319739782,  0.000933727628073966,  0.000950227261990875,  0.00147003944872334,  0.0124600143338969,  0.870473882428209,  0.000280092067426596,  0.000546941407252064  },
                                {  0.0019240214442163,  0.00101883577104476,  0.000241476755391936,  0.000450257221171275,  0.00843452932586251,  0.00154820918396991,  0.00108911744434684,  0.000999201205195062,  0.000479007721330004,  0.00556429331266608,  0.00127525390404128,  0.000279691708877873,  0.000795602288047482,  0.00079689080081276,  0.00260978111074807,  0.00152149870377392,  0.000784771988537106,  0.00140941021132536,  0.960748095662695,  0.00803005423594675  },
                                {  0.00172993397781363,  0.00194467620704781,  0.00073236769821708,  0.000782053651055545,  0.0307352812514993,  0.000418548689568226,  0.0103001266101967,  0.00142306033817485,  0.000898469692611072,  0.00328450854311631,  0.000990987338126529,  0.00225063407268464,  0.000420475966605071,  0.00110110874236479,  0.00136546000716563,  0.00222607627161523,  0.00128661484656921,  0.00198760572992781,  0.00365015158849017,  0.932471858777151  }
                        })
        );
    }

    public static Stream<Arguments> getEpsilon() {
        return Stream.of(
                Arguments.of(0.0),
                Arguments.of(0.5),
                Arguments.of(1.0)
        );
    }


    RandomVariable<TimeTree> tree;
    @BeforeEach
    void setUp() {
        // this is only for init PhyloCTMC, tree would not be required.
        Coalescent coalescent = new Coalescent(new Value<>("theta", 10.0),
                new Value<>("n", 10), null);
        tree = coalescent.sample();
    }

    @ParameterizedTest
    @MethodSource("getRates")
    void testNonRev(Double[] rates, final double[][] expectedP) {
        int numStates;
        SequenceType dataType;
        if (rates.length == 380) {
            numStates = 20;
            dataType = SequenceType.AMINO_ACID;
        } else {
            numStates = 4;
            dataType = SequenceType.NUCLEOTIDE;
        }

        NonReversible nonrev = new NonReversible(new Value<>("rates", rates), null,
                null, null, null);

        final Value Q = nonrev.apply();

        PhyloCTMC phyloCTMC = new PhyloCTMC(tree, null, null, Q,
                null, null, new Value<>("L", 100),
                new Value<>("dataType", dataType), null);
        // not simulate sequences, so ignore sample(), then tree stats and L should not affect the result
        phyloCTMC.setup();
        double[][] p = new double[numStates][numStates];
        double branchLength = 0.1;
        phyloCTMC.getTransitionProbabilities(branchLength, p);
        System.out.println("Calculated trans probs = " + Arrays.deepToString(p));
        System.out.println("Expected trans probs = " + Arrays.deepToString(expectedP));

        for (int i = 0; i < p.length; i++) {
            assertArrayEquals(p[i], expectedP[i], 1E-12);
        }

        for (int i=0; i < numStates; i++) {
            Double[][] Qval = (Double[][]) Q.value();
            double sum1 = 0;
            double sum2 = 0;
            for (int j=0; j<numStates; j++) {
                sum1 += Qval[i][j];
                sum2 += p[i][j];
            }
            System.out.println("row " + (i+1) + " Q sum = " + sum1);
            assertEquals(0, sum1, 1E-12);
            System.out.println("row " + (i+1) + " prob sum = " + sum2);
            assertEquals(1, sum2, 1E-12);
        }

        p = new double[numStates][numStates];
        branchLength = 100000;
        phyloCTMC.getTransitionProbabilities(branchLength, p);
        System.out.println("Calculated equilibrium = " + Arrays.toString(p[0]));

        for (int i = 1; i < numStates; i++) { //TODO investigate
            System.out.println("Row "+(i+1)+" equilibrium = " + Arrays.toString(p[i]));
            for (int j = 0; j < numStates; j++) {
//                assertEquals(p[0][j], p[i][j], 1E-8);
            }
        }

    }

    @ParameterizedTest
    @MethodSource("getEpsilon")
    void testNonRevEquilibrium(double epsilon) {
        Double[] rates = new Double[]{1.0, epsilon, 0.0,
                                      0.0, 1.0, epsilon,
                                      epsilon, 0.0, 1.0,
                                      1.0, epsilon, 0.0};
        Double[] freqs = new Double[]{0.25, 0.25, 0.25, 0.25};
        double[][] p = getEquilibrium(rates, freqs);
        System.out.println("Calculated equilibrium = " + Arrays.deepToString(p));
        System.out.println("Expected equilibrium = " + Arrays.toString(freqs));

        for (int i = 0; i < freqs.length; i++) {
            assertEquals(p[0][i], freqs[i], 1E-12);
        }
    }

    private double[][] getEquilibrium(Double[] rates, Double[] freqs) {
        NonReversible nonrev = new NonReversible(new Value<>("rates", rates), null,
                null, null, null);

        final Value Q = nonrev.apply();

        int numStates = freqs.length;
        SequenceType dataType = SequenceType.NUCLEOTIDE;

        PhyloCTMC phyloCTMC = new PhyloCTMC(tree, null, null, Q,
                null, null, new Value<>("L", 100),
                new Value<>("dataType", dataType), null);
        phyloCTMC.setup();
        double[][] p = new double[numStates][numStates];
        double branchLength = 1000;
        phyloCTMC.getTransitionProbabilities(branchLength, p);
        return p;
    }

}